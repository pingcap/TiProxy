name: integration
on:
  workflow_call:
    inputs:
      debug:
        type: boolean
        description: "set tmate on failure"
        required: true
      ref:
        type: string
        description: "checkout specific ref"
        required: true

defaults:
  run:
    shell: bash

jobs:
  integration:
    runs-on: "ubuntu-latest"
    services:
      mysql:
        image: mysql:5
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_DATABASE: test
        ports:
            - '3306:3306'
    steps:
      - name: "checkout repo"
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}
      - name: "checkout mysql"
        uses: actions/checkout@v3
        with:
          repository: "xhebox/mysql-server"
          path: "mysql-server"
      - name: "setup golang"
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          check-latest: true
      - name: "set vars"
        id: cache
        run: |
          echo "::set-output name=go_cache::$(go env GOCACHE)"
          echo "::set-output name=go_mod_cache::$(go env GOMODCACHE)"
      - name: "try to use build cache"
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.cache.outputs.go_cache }}
            ${{ steps.cache.outputs.go_mod_cache }}
          key: ${{ runner.os }}-go-${{ inputs.target == 'cache' && github.run_id || hashFiles('**/go.sum')}}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: build tiproxy
        run: make cmd
      - name: setup & test
        run: |
          sed -i 's/# pd-addrs = "127.0.0.1:2379"/pd-addrs = ""/' conf/proxy.toml
          sed -i 's/# auto-certs = true/auto-certs = true/' conf/proxy.toml
          sed -i 's/4000/3306/' conf/namespace/example.toml
          ./bin/tiproxy --config conf/proxy.toml &
          sleep 1
          ./bin/tiproxyctl -k namespace import conf/namespace/
          ./bin/tiproxyctl -k namespace commit default
          mysql -h 127.0.0.1 --port 3306 -u root -e 'CREATE DATABASE IF NOT EXISTS test;'
          mysql -h 127.0.0.1 --port 6000 -u root -e 'CREATE DATABASE IF NOT EXISTS test;'
          ./build/bin/mysql_client_test -P 6000 -u root -p=root -h 127.0.0.1
      - name: build mysql client test
        run: |
          cmake -Bbuild -DWITHOUT_SERVER=on -DWITH_UNIT_TESTS=off mysql-server
          cmake --build build -t mysql_client_test
      - name: "set up tmate session if necessary"
        if: ${{ failure() && inputs.debug }}
        uses: mxschmitt/action-tmate@v3
